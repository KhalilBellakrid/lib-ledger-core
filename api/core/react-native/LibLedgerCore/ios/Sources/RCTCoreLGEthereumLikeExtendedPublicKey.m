// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from addresses.djinni

#import "RCTCoreLGEthereumLikeExtendedPublicKey.h"


@implementation RCTCoreLGEthereumLikeExtendedPublicKey
//Export module
RCT_EXPORT_MODULE(RCTCoreLGEthereumLikeExtendedPublicKey)

-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImpl = [[LGEthereumLikeExtendedPublicKey alloc] init];
    }
    return self;
}

RCT_REMAP_METHOD(derive,derive:(nonnull NSString *)path withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl derive:path]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGEthereumLikeExtendedPublicKey::derive", nil);
    }
}

RCT_REMAP_METHOD(derivePublicKey,derivePublicKey:(nonnull NSString *)path withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl derivePublicKey:path]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGEthereumLikeExtendedPublicKey::derivePublicKey", nil);
    }
}

RCT_REMAP_METHOD(deriveHash160,deriveHash160:(nonnull NSString *)path withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl deriveHash160:path]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGEthereumLikeExtendedPublicKey::deriveHash160", nil);
    }
}

RCT_REMAP_METHOD(toBase58,toBase58WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl toBase58]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGEthereumLikeExtendedPublicKey::toBase58", nil);
    }
}

RCT_REMAP_METHOD(getRootPath,getRootPathWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl getRootPath]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGEthereumLikeExtendedPublicKey::getRootPath", nil);
    }
}
@end
