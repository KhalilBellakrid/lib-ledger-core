// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ethereum_like_wallet.djinni

#import "RCTCoreLGEthereumLikeTransaction.h"


@implementation RCTCoreLGEthereumLikeTransaction
//Export module
RCT_EXPORT_MODULE(RCTCoreLGEthereumLikeTransaction)

-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImpl = [[LGEthereumLikeTransaction alloc] init];
    }
    return self;
}

/** Get the hash of the transaction. */
RCT_REMAP_METHOD(getHash,getHashWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl getHash]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGEthereumLikeTransaction::getHash", nil);
    }
}

/** Get the nonce of the transaction : sequence number issued by originating EOA */
RCT_REMAP_METHOD(getNonce,getNonceWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :@([self.objcImpl getNonce])};if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGEthereumLikeTransaction::getNonce", nil);
    }
}

/** Get Gas price (in wei) */
RCT_REMAP_METHOD(getGasPrice,getGasPriceWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl getGasPrice]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGEthereumLikeTransaction::getGasPrice", nil);
    }
}

/** Get start gas (in wei) : maximum amount of gas the originator is willing to pay */
RCT_REMAP_METHOD(getGasLimit,getGasLimitWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl getGasLimit]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGEthereumLikeTransaction::getGasLimit", nil);
    }
}

/** Get destination ETH address */
RCT_REMAP_METHOD(getReceiver,getReceiverWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl getReceiver]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGEthereumLikeTransaction::getReceiver", nil);
    }
}

/** Get amount of ether to send */
RCT_REMAP_METHOD(getValue,getValueWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl getValue]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGEthereumLikeTransaction::getValue", nil);
    }
}

/** Get binary data payload */
RCT_REMAP_METHOD(getData,getDataWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl getData]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGEthereumLikeTransaction::getData", nil);
    }
}

/** Serialize the transaction to its raw format. */
RCT_REMAP_METHOD(serialize,serializeWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl serialize]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGEthereumLikeTransaction::serialize", nil);
    }
}

/**
 * Get the time when the transaction was issued or the time of the block including
 * this transaction
 */
RCT_REMAP_METHOD(getTime,getTimeWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl getTime]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGEthereumLikeTransaction::getTime", nil);
    }
}
@end
