// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ethereum_like_wallet.djinni

#import "RCTCoreLGEthereumLikeTransactionBuilder.h"


@implementation RCTCoreLGEthereumLikeTransactionBuilder
//Export module
RCT_EXPORT_MODULE(RCTCoreLGEthereumLikeTransactionBuilder)

-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImpl = [[LGEthereumLikeTransactionBuilder alloc] init];
    }
    return self;
}

/**
 * Send funds to the given address. This method can be called multiple times to send to multiple addresses.
 * @param amount The value to send
 * @param address Address of the recipient
 * @return A reference on the same builder in order to chain calls.
 */
RCT_REMAP_METHOD(sendToAddress,sendToAddress:(nullable LGAmount *)amount
                                     address:(nonnull NSString *)address withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl sendToAddress:amount address:address]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGEthereumLikeTransactionBuilder::sendToAddress", nil);
    }
}

/**
 * Send all available funds to the given address.
 * @param address Address of the recipient
 * @return A reference on the same builder in order to chain calls.
 */
RCT_REMAP_METHOD(wipeToAddress,wipeToAddress:(nonnull NSString *)address withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl wipeToAddress:address]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGEthereumLikeTransactionBuilder::wipeToAddress", nil);
    }
}

/**
 * Set gas price (in wei) the originator is willing to pay
 * @return A reference on the same builder in order to chain calls.
 */
RCT_REMAP_METHOD(setGasPrice,setGasPrice:(nullable LGAmount *)gasPrice withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl setGasPrice:gasPrice]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGEthereumLikeTransactionBuilder::setGasPrice", nil);
    }
}

/**
 * Set gas limit (in wei) the originator is not willing to exceed
 * @return A reference on the same builder in order to chain calls.
 */
RCT_REMAP_METHOD(setGasLimit,setGasLimit:(nullable LGAmount *)gasLimit withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl setGasLimit:gasLimit]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGEthereumLikeTransactionBuilder::setGasLimit", nil);
    }
}

/** Set input data the originator wants to embed in transaction */
RCT_REMAP_METHOD(setInputData,setInputData:(nonnull NSData *)data withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl setInputData:data]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGEthereumLikeTransactionBuilder::setInputData", nil);
    }
}

/** Build a transaction from the given builder parameters. */
RCT_REMAP_METHOD(build,build:(nullable id<LGEthereumLikeTransactionCallback>)callback) {

    [self.objcImpl build:callback];
}

/**
 * Creates a clone of this builder.
 * @return A copy of the current builder instance.
 */
RCT_REMAP_METHOD(clone,cloneWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl clone]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGEthereumLikeTransactionBuilder::clone", nil);
    }
}

/** Reset the current instance to its initial state */
RCT_EXPORT_METHOD(reset) {

    [self.objcImpl reset];
}

RCT_REMAP_METHOD(parseRawUnsignedTransaction,parseRawUnsignedTransaction:(nonnull LGCurrency *)currency
                                                          rawTransaction:(nonnull NSData *)rawTransaction withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[LGEthereumLikeTransactionBuilder parseRawUnsignedTransaction:currency rawTransaction:rawTransaction]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGEthereumLikeTransactionBuilder::parseRawUnsignedTransaction", nil);
    }
}
@end
