// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from addresses.djinni

#import "RCTCoreLGEthereumLikeAddress.h"


@implementation RCTCoreLGEthereumLikeAddress
//Export module
RCT_EXPORT_MODULE(RCTCoreLGEthereumLikeAddress)

-(instancetype)init
{
    self = [super init];
    //Init Objc implementation
    if(self)
    {
        self.objcImpl = [[LGEthereumLikeAddress alloc] init];
    }
    return self;
}

/**
 * Gets the version of the address
 * @return The version of the address
 */
RCT_REMAP_METHOD(getVersion,getVersionWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl getVersion]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGEthereumLikeAddress::getVersion", nil);
    }
}

/**
 * Gets the raw keccak hash of the public key (truncated to 20 bytes)
 * @return The 20 bytes of the public key keccak hash
 */
RCT_REMAP_METHOD(getKeccakHash,getKeccakHashWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl getKeccakHash]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGEthereumLikeAddress::getKeccakHash", nil);
    }
}

/**
 * Gets the network parameters used for serializing the address
 * @return The network parameters of the address
 */
RCT_REMAP_METHOD(getNetworkParameters,getNetworkParametersWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl getNetworkParameters]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGEthereumLikeAddress::getNetworkParameters", nil);
    }
}

/**
 * Encodes keccak with respect to EIP55
 * @return The EIP55 encoding
 */
RCT_REMAP_METHOD(toEIP55,toEIP55WithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {

    id result = @{@"result" :[self.objcImpl toEIP55]};
    if(result)
    {
        resolve(result);
    }
    else
    {
        reject(@"impl_call_error", @"Error while calling LGEthereumLikeAddress::toEIP55", nil);
    }
}
@end
